1、客户端与服务器
上网目的：获取和消费网络资源
服务器定义：在上网中，存取和对外提供资源的电脑
客户端定义：在上网中，获取和消费资源的电脑
ps：客户端通过浏览器来访问服务器中的各种资源



2、URL地址/统一资源定位符
作用：可以精确的获取到资源的唯一存放位置
理解：人的身份证
组成部分：1、(客户端与服务器之间的)通信协议
                   2、(存有该资源的)服务器名称
                   3、(资源在服务器上的)具体位置
eg：https://xuexi.boxuegu.com/video.html?courseId=955
https                                             表示通信协议
xuexi.boxuegu.com                   表示服务器名称
video.html?courseId=955         表示资源在服务器上的具体位置



3、客户端与服务器通信过程
步骤：1、客户端请求服务器(打开浏览器、输入网址地址，回车)
           2、服务端处理请求(接收请求，找到对应的资源)
           3、服务端响应客户端(服务端把找到的资源相应给客户端)
ps：客户端与服务器通信过程：请求-处理-响应
        网页中的每一个资源，都是通过请求-处理-响应的方式从服务器获取回来的



4、通过浏览器分析客户端与服务端的通信过程
步骤：1、打开Chrome浏览器
            2、右击按  “检查” 或  F12  或 control+shift+i 打开控制台
           3、点击    “Network”
           4、选中 "Doc"页签
           5、刷新页面，分析
ps：当刷新页面后，"Headers"可看见URL地址
                                    "Response"可看见服务器相应客户端的数据


5、服务器对外提供的资源
定义：内容、音频、视频、数据等都是资源
ps：html是网页骨架，css是网页的颜值，javascript是网页的行为，数据是网页的灵魂，骨架、颜值、行为皆为数据服务
        数据是网页的灵魂，数据在网页中无处不在
        数据也是服务器对外提供的一种资源



6、网页请求数据
定义：数据也是一种资源，必须经过请求-处理-相应的方式进行获取
语法： var xhrObj = new XMLHttpRequest()
ps：若网页请求服务器上的数据资源，需要使用XMLHttpRequest(xhr)对象



7、资源的请求方式
方式：get请求             从服务器获取资源            eg：根据URL地址，获取html、css、js、图片、数据资源等
           post请求           从服务器发送资源             eg：向服务器提交注册、登录等数据提交操作



8、Ajax
定义：在网页使用XMLHttpRequest对象和服务器进行数据交互的方式(使用到XMLHttpRequest对象就为Ajax)
作用：实现网页和服务器之间的数据交互
使用场景：用户名检测、搜索提示、数据分页显示、数据的增删改查
ps：网页本质上是数据的载体
        所有的Ajax请求都可通过网页控制台的XHR查看(XHR可以监听和过滤所有的Ajax请求)



9、jQuery中的Ajax
作用：屏蔽了浏览器的兼容问题，更方便用户使用
出现：浏览器提供的Ajax的用法复杂，使用jQuery中的Ajax降低了使用难度
方法： $.get()           从服务器获取数据
            $.post()         向服务器提供数据
            $.ajax()           既可以从服务器获取数据，也可以向服务器提交数据


$.get()
(1)$.get()函数
作用：从服务器获取资源
语法：$.get('url地址', [data ], [callback ])                ps：[ ]不是数组，而是代表可选参数
url表示资源地址                                                                            字符串类型
data表示请求服务器携带的参数                                                   对象类型
callback表示当请求成功后返回数据给客户端的回调函数            回调函数

(2)$.get()发起不带参数的请求
定义：提供请求的URL地址和请求成功后返回数据给客户端的回调函数
语法： $.get('URL地址',  function(res) { })        ps：res表示服务器返回给客户端的数据

(3)$.get()发起带参数的请求
作用：可以获取参数对应的具体的那条数据
语法：$.get('URL地址', {id:1}, function(res){})


$.post()
(1)$.post()函数
作用：向服务器提交数据
语法：$.post('请求的url地址', [data ], [callback ])                ps：[ ]不是数组，而是代表可选参数
url表示请求的URL地址                                                                       字符串类型
data表示提交给服务器的的数据                                                         对象类型
callback表示当请求成功后返回数据给客户端的回调函数                  回调函数




$.ajax()
定义：相当于$.get()和$.post()
功能：既可以从服务器获取数据，也可以向服务器发送数据
语法：$.ajax({
      type: 'GET/POST',                 大小写都可
      url:' URL地址',
      data:  { },                                   请求携带的数据
      success: 'function(res){}'       请求成功后返回的回调函数
})
ps：无论是获取数据还是发送数据，只要是参数都得写在data对象中
        若要使用$.ajax发起GET请求，只需要设置type的属性值为'GET'
         如果若不需要参数，则可以把data属性及对应的属性值省略
         若要向服务器发送POST请求，则需要设置type的属性值为'POST'
         若要在网页中查看ajax请求，则在Network中的XHR查看


10、接口
定义：使用ajax请求数据时，被请求的URL地址是接口
过程：基于请求方式，过程都是请求-处理-响应
ps：每个接口都有对应的请求方式(GET请求、POST请求)


11、接口测试工具/PostMan
作用：检测接口能否被正常访问
好处：不写任何代码，对接口进行调用和测试
组成部分：第一行表示菜单栏
                   第二行表示工具栏
                   左侧部分表示历史记录
                  右侧部分表示请求地址区域
                  右侧部分表示请求参数区域
                  右侧部分表示响应结果区域
                  最后一行表示状态栏
请求步骤：1、选中请求方式
                    2、填写请求的URL地址
                    3、填写请求携带的参数(若无参数则可省略)
                    4、点击"Send"发送请求
                     5、查看服务器响应的结果
ps：若是检测是GET请求，并且需要携带请求的参数，则需在Params栏中填写参数
        若是检测POST请求，并且必须需要携带请求的参数，则需要在Body栏中填写参数，并且勾选x-www-form-urlencoded，再填写要发送的数据



11、接口文档             了解
定义：接口的说明文档
作用：为调用接口提供依据
组成：接口名称、接口URL地址、调用方式(GET请求或POST请求)、参数格式、响应格式(接口的返回值)



12、表单
作用：数据采集
标签：form双标签
组成部分：表单标签(form标签)、表单域、表单按钮(button)
ps：当form标签中有提交的标签，则会把表单的内容提交给服务器来处理
        表单域包括文本框、密码框、隐藏框、多行文本框、复选框、单选框、下拉选择框、文件上传框


form表单的属性
作用：把采集到的数据发送到服务器
属性                  属性值                                                                              作用
action                 URL地址                                                                        当提交表单时， 把表单数据提交到哪里
target               _self   _blank(新窗口打开)                                                                  在何处打开URL地址(默认值为_self，表示在原窗口下打开URL地址)     
method            get       post(常用)                                                          以何种方式提交表单数据(默认为get，表示把表单数据提交到URL地址上)          
enctype            application/x-www-form-urlencoded(默认)             提交表单数据之前对表单数据进行编码
                           multipart/foramdata 			        在使用包含文件上传控件表单时必须使用该值
使用POST还是GET方式：get适合提交少量简单的数据，而post适合提交大量，文件上传、保护数据安全、登录/注册的数据
ps：若没有指定具体的action属性值，action的默认值为当前页面的URL地址。即把表单数据提交到当前的URL地址，数据放在地址的后面
         若给action指定了具体的URL地址，则会把表单数据提交到具体的URL地址
        当提交表单后，页面会跳转到action指定的URL地址，若无指定的URL地址，则默认为当前的URL地址
        target属性值为_blank表示在新窗口打开URL地址
       method属性为post,表示可以把提交的表单数据不在URL地址上显示，而是通过把表单数据隐藏来提交，通过控制台"Network的Headers中的FormData"查看数据，提高了用户的安全性
       关键数据的提交需要把method的属性值设置为post
       若enctype属性值为multipart/form-data则是不对字符编码(如果在表单中要上传文件，则必须使用该值)




form表单的同步提交
定义：通过sumbit按钮触发表单提交，从而让页面跳转到action指定的URL地址
缺点：1、页面会跳转到action指定的URL地址
           2、页面之前的状态和数据会缺失
解决方法：form表单负责采集数据，通过ajax把数据提交到服务器



13、通过ajax提交表单数据
(1)监听表单的提交事件
语法： $('表单选择器').submit(function(e){   })
            $('表单选择器').on('submit', function(e) {  })


(2)阻止表单的默认行为
出现：由于默认的当点击提交了表单数据，则表单会默认的把页面跳转到action指定的URL地址，但不想要跳转到默认的页面跳转，即阻止表单的默认提交行为
语法： $('表单选择器').submit(function(e){ e.preventDefault() })


(3)快速获取表单中的数据
作用：可以一次性的获取表单中的所有数据
语法：$('表单选择器').serialize()
ps：表单域(每个输入框)必须有name属性，并且有对应唯一的属性值，即在调用serialize()函数时必须给每个表单元素添加name属性，若不添加name属性，则无法获取到表单中的数据
        调用得到的结果是name属性对应的属性值=用户输入的值，即属性值1=用户输入的值1  & 属性值2 = 用户输入的值2 
        调用该函数返回的是一个值，故需要用变量名来接这个返回值 
        name属性值的设置要看传递给服务器的参数名是什么，参数名是a，则name属性值为a



14、模板引擎
定义：指定的模板结构和数据，通过模板引擎，自动生成一个完整的HTML页面
作用：减少字符串拼接、便于维护
ps：使用模板引擎得到的responseText为JSON字符串，需要将其转换为JS对象，方便操作


15、art-template模板引擎
使用步骤：1、导入art-template         导入art-template.js文件
                   2、定义渲染的数据             在script中定义渲染的数据
                   3、定义模板                         <script type="text/html"  id="">写HTML标签结构</script>
                   4、调用template函数          在script标签中调用tempalte,语法template('定义模板的id属性值', 渲染的数据)        ps：id的属性值是一定不用加#，直接取其属性值
                   5、渲染HTML结构              在需要加数据的标签加双括号{{数据名}}，并且通过DOM或者jQuery操作把结构渲染到页面上，通过$('选择器').html(调用函数的返回值对应的变量名)     ps：数据名是data对象中的属性名， 双括号是表示占位
ps：当导入了art-template.js文件则自动会的引入template函数，即在window全局，多一个template函数
        若要调用template函数，则语法： template('模板的id选择器名'， 需要渲染的数据对象名)              ps：此处的id选择器名不需要加#，因为不是获取标签，而是直接拿到id属性对应的属性名(选择器名)
       定义模板必须是在script中定义，并且设置script标签的type属性的值为text/html，这样可以在script标签内写html标签
      调用template函数后，函数有个返回值，故需要用个变量名来接这个函数返回值
     若要使用到value值，语法: {{$value.属性名}}
        

16、art-template标准语法
定义：art-template提供了{{}}语法， 在{{}}内可以进行输出、循环数组等操作
ps：输出包括变量的输出、对象属性的输出、三元表达式的输出、逻辑或的输出、加减乘除等表达式的输出

原文输出
使用场景：若输出的值(定义的数据)中包括了HTML标签，则用原文输出
语法： {{@ value }}       value表示包括有HTML标签
ps：数据中有标签必须用原文输出，否则会把标签当作字符串显示到页面中


条件输出
使用场景：若输出的值(定义的数据)中包需要有条件判断，则需要条件输出，进行按需输出
语法： {{if  value}}   按需输出的内容    {{/if }}
             {{if  value }}  按需暑促的内容   {{else if value2}}  按需输出的内容  {{/if}}
ps：只有当value的布尔值为true时，则会执行按需输出的内容
         那个条件满足则会执行那个条件里的内容


循环输出
使用场景：若输出的值(定义的数据)中包括了数组，则需要循环输出
语法：{{each arr}}
                   {{$index}}    {{$value}}
           {{/each}}
ps：arr表示循环的数组名，{{$index}}表示循环数组时获取到当前的下标，{{$value}}表示循环数组时获取当前数组的每一项数组的值，注意其千万别忘记$符号


过滤器
本质：是一个function处理函数
原理：将需要处理的值以参数的形式传递给过滤器函数，通过过滤器函数，返回一个新值，这个新值就是我们所需要的值
语法：{{值 | 过滤器函数名}}              ps： |表示管道符，即上一个的输出作为下一个的输入
定义过滤器函数的语法：   template.defaults.imports.过滤器函数名 =  function(value){ return 新值}            ps：必须要使用return把处理的结果返回
ps：定义过滤器函数需要在纯script标签中定义
        定义过滤器函数一定要放在定义模板数据的前面
        {{值 | 过滤函数名}}需要放下定义的模板中，即相当于调用过滤器函数，此时的值是过滤完返回的值


正则表达式的exec函数
定义：检测正则表达式是否能在字符串中找到，找到则会返回找到的值
作用：检测字符串中的正则表达式匹配
语法：匹配的正则表达式.exec(检测的字符串)
ps：若字符串有匹配的值，则会返回这个值，若无则返回null
         无论有没有找到值，该函数有一个返回值，故需要用一个变量名来接
 

正则表达式的分组
场景：得到花括号里的具体内容
定义：用一个括号表示分组
作用：通过分组提取到想要的内容
语法：/{{(正则表达式)}}/
ps：分组返回的是一个数组，下标为0提取到的是{{内容}}，下标为1的是提取到花括号里的具体内容，

replace函数
作用：用一些字符串替换另外一些字符串
语法： var   变量名= '123456'.replace('需要替换内容','替换后的内容')
ps：若要多次实现replace，则只能是一次一次的替换
        若匹配的字符串有空格，则需要在正则表达式的前面后加上\s*   *表示0个或多个
        使用该函数会返回一个新值，故需要一个变量名来接 
        当多次匹配，匹配的最后一个结果的null，表示所有的匹配结束
       若要实现多次匹配，可用while循环简化步骤
        用replace实现替换真值，用a表示数组下标为1的值，即可拿到真正的内容，在replace时，把a改为 数据的对象名[a]，这样就可以把{{}}的内容替换成数据的内容



17、实现简易的模板引擎
步骤：1、定义模板结构                 <script  type="type/html"  id="名字a"  > {{ }}         </script>
            2、预调用模板引擎                                   定义数据b{} 、 var 变量名=调用模板引擎template('名字a',  数据b)、 定义容器(设置一个div标签)，并把模板显示的页面渲染到容器内
           3、封装template函数                                function   template(id,data) {     用循环多次实现replace, 并返回str    }
           4、导入并使用自定义的模板引擎             



18、XMLHttpRequest/xhr的基本使用
定义：是浏览器提供的JavaScript对象
作用：请求服务器上的数据资源
ps：jQuery中的ajax是基于xhr对象封装出来的函数

(1)使用xhr发起GET请求
步骤：1、建立xhr对象                                                                                                  var  xhr = new XMLHttpRequest()
           2、调用xhr.open()函数，指定请求的方式和请求的URL地址                          xhr.open('GET/POST',   '请求的URL地址?参数')
           3、调用xhr.send()函数，发起Ajax请求			          xhr.send()
           4、监听xhr.onreadystatechange事件， 得到服务器响应回来的数据          xhr.onreadystatechange= function(){   if (xhr.readyStatus===4  &&  xhr.status===200) { 服务器响应回来的数据 xhr.responseText  }       }
ps：在监听onreadystatechange事件中，xhr.readyState===4表示xhr对象的请求到服务器的状态成功，xhr.status===200表示服务器响应回来数据的状态成功
        xhr.responseText是服务器响应回来的数据
        xhr.status和服务器响应回来数据中的status是不一样的，xhr.status中是status表示的是发起ajax请求的status，是请求状态的一部分，而服务器响应回来的数据中的status表示的是数据中的一部分，是数据对象中的一个属性，二者本质不同 
        xhr.readyState表示当前ajax请求的状态，值为0表示对象创建，但未调用open方法；值为1表示open方法被调用；值为2表示send方法被调用；值为3表示数据接受中；值为4表示请求完成
        若xhr发起get请求携带参数，则在调用open方法时，在请求的url地址后带上参数，写法  ?参数                      ps：在URL地址后拼接的参数叫查询字符串


查询字符串
作用：将想要发送到服务器的数据添加到URL中
定义：在URL地址后拼接的参数
写法：URL地址?参数名=值
ps：若有多个参数则用&分割

GET请求携带参数的本质
本质：只要是发起GET请求，都是直接将参数以查询字符串的形式，把参数拼接到URL地址后面

URL编码和解码
定义：URL地址中只允许出现英文、数字、标点符号，不允许出现中文字符，但又需要在URL地址中出现中文这样的字符，即对中文字符进行编码(转义)
原则：使用英文字符表示非英文字符(使用安全的字符表示不安全的字符)
编码：使用encodeURI()函数              var 变量名=encodeURI('中文字符')           可以把中文字符转化为非中文字符
解码：使用decodeURI()函数             var  变量名= decodeURI('非中文字符')       可以把非中文字符转化为中文字符
ps：一个中文字经过编码后会转化为三组百分号
         浏览器会自动的对中文字符进行编码，不需要程序员手动编码和解码
        更多URL编码知识：https://blog.csdn.net/Lxd_0111/article/details/78028889



(2)使用xhr发起POST请求
步骤：1、建立xhr对象                                                                             var xhr = new XMLHttpRequest()
            2、调用xhr.open()函数 				         xhr.open('GET', 'URL地址')
            3、设置Content-type属性(固定写法)                                          xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')   固定写法
            4、调用xhr.send()函数,同时指定要发送的数据                            xhr.send('id=1&bookname=西游记&publisher=上海出版社')
            5、监听onreadystatechange事件                                                xhr.onreadystatechange = function() { if (xhr.readyState === 4  && xhr.status ===200) {  服务器响应回来的数据xhr.responseText  } }




19、数据交换格式
定义：服务器与客户端进行数据传输与交换的格式
方式：XML(了解)、JSON(重点)

(1)XML                               了解
特点：语意性较强
定义：可扩展标记语言
缺点：XML格式臃肿，传输效率低、在JavaScript中解析XML比较麻烦
ps：区别XML和HTML：两种为标记语言但无任何的关系，前者用来传输和存储数据，是数的载体；后者是描述网页的内容，是网页的载体



20、JSON                        重点
定义：Javascript对象和数字的字符串表示法
优点：更小、更快、更易解析
本质：用字符串表示Javascript对象数据和数组数据
作用：类似XML，存储和传输数据
结构：1、对象结构       {"属性名", 属性值}                          ps：属性值只能是数字、字符串、布尔值、null、数组、对象
            2、数组结构      [数据1, 数据2, 数据3，数据4]       ps：数据1、数据2、数据3、数据4的数据类型可以是数字、字符串、布尔值、null、数组、对象
ps：对象结构中，属性值也是需要""，数组中的值页需要""       但age属性对应的属性值、null则不用加英文的双引号，即只要是字符串都得用英文的双引号括起来
        属性名、字符串类型的值都需要用英文的双引号包裹，换句话说，不允许用单引号包裹字符串类型
        由于JSON不是代码，即不可以写注释
        JSON的最外层必须是对象或者是数组
        JSON的值必须是数字、字符串、布尔值、null、数组、对象。即JSON的值不能是undefined和函数
       JSON和JS对象的关系：JSON是JS对象的字符串表示法，本质是字符串    eg： var json = '{"name": "zs", "age":20}'


JSON字符串和JS对象相互转化
1、JSON反序列化：把JSON字符串转化为JS对象： var obj = JSON.parse(JSON字符串)
2、JSON序列化：    把JS对象转化为JSON字符串： var json = JSON.stringify(JS对象)
ps：记住若是使用了JSON.parse()则是反序列化



21、封装自定义的Ajax函数
定义options参数选项：method、url  、data  success
步骤：定义data参数、定义ithema函数、判断请求的类型


(1)处理data参数
作用：通过一个函数把对象转化为字符串，以查询字符串的格式显示
语法： function  resolveData(data)  {
          var arr = []
          for (var k  in  data)   {
                 arr.push(k+ '=' +  data[k])
}
           return     arr.join('&')
}
ps：join方法是把所有的数组元素放入一个字符串，此处是把&加在数组两个值之间，即都是字符串都会进行拼接，显示结果变为都是字符串的值的结果连在一起显示    即name=zs&age=20
       调用resolveData函数后必须要用一个变量名来接这个函数返回值


(2)定义ithema函数
function itheima(options) {
    var xhr = new XMLHttpRequest()

    //把外界传来的参数对象转化为查询字符串，ps表示查询参数，即要提交给服务器的参数
    var qs = resolveData(options.data) 


      //(3)、判断请求的类型
    if (options.method.toUpperCase() === 'GET') {
        //发起GET请求             //qs表示提交给服务器的参数
        xhr.open(options.method, options.url + '?' + qs)
        xhr.send()
    } else if (options.method.toUpperCase() === 'POST') {
        //发起POST请求
        xhr.open(options.method, options.url)
        xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded')
        xhr.send(qs)
    }


    xhr.onreadystatechange  = function() {
        if (xhr.readyState === 4 && xhr.status === 200) {
            //xhr.responseText为JSON字符串，需要将其转化为JS对象，使用JSON.parse()
            var result = JSON.parse(xhr.responseText)

            //服务器响应回来的数据，在此次不是通过success:function(){},而是通过options.success(数据)
            options.success(result)
        }
    }
}




22、新版XML/XML Level2
功能：1、可以设置请求的时间限制
            2、可以使用FormData对象管理表单数据
            3、可以上传文件
            4、在数据传输时，可以获取到传输的进度信息


(1)设置请求时间限制
语法： var xhr = new XMLHttpRequest()
             xhr.timeout = 时间1          ps：时间1必须是以毫秒作为单位，1s = 1000ms
           xhr.ontimeout = functiont (event) {  超过时间，请求失败才调用的函数  }
理解：通过timeout属性，可以设置请求的终止时间，若超过了终止时间，则停止请求，说明发送失败，这时timeout响应请求失的timeout事件



(2)通过FormData对象管理表单数据
步骤：1、创建FormData对象      		  var fd = new FormData()
            2、为FormData对象添加表单项             	  fd.append('uname', 'zs')
            3、创建XHR对象 			  var  xhr =   new   XMLHttpRequest()
            4、指定请求类型和地址			  xhr.open('请求类型'，'URL地址')
            5、提交FormData对象数据		  xhr.send(fd)
            6、监听事件 				  xhr.onreadystatechange = function() { if (xhr.readystate=== 4   &&  xhr.status === 200 ) {   }  }


(3)通过FormData对象获取页面表单的值
步骤：1、获取表单元素                       var form = document.querySelector('表单标签对应的选择器')
            2、监听表单的提交事件           form.addEventListener('submit', function(e){
	//阻止默认行为                      e.preventDefault()
                  //把表单标签中的数据自动的添加到FormData对象中            var   fd  = new FormData(form)
                 //创建xhr对象				          var  xhr  =new  XMLHttpRequest()
                 //发送给服务器的请求类型和请求的URL地址	          xhr.open('POST','URL地址')
                //把FormData对象的数据提交给服务器		          xhr.send(fd)
               //xhr监听事件				          xhr.onreadystatechange = function()  {   if(xhr.readystate === 4   && xhr.status === 200)  {   }}
})


(4)向服务器上传文件
步骤：1、定义UI结构                                       
                     <input type="file" id="file1" />        
                    <button id="btnUpload">上传文件</button>      
                    <img  scr=""    alt=""    id="img"  >
           2、验证是否选择了文件  
                  <script>
		var   btn = document.querySelector('#btnUpload')
                                    btn.addEventListener('click',function(){
			var    file = document.querySelector('#file1').files                  ps：文件选择框的DOM对象有个files属性，表示一个文件数组，
                                                      if (file.length <= 0)  {
				//说明文件的长度为0，即没有选择上传的文件
				return   alert("提示用户上传文件")
}
			//说明文件长度不为0，即表示选择了待上传文件
})
	</script>                
           3、若选择了文件，则向FormData中追加文件
                        var fd = new FormData()
                         fd.append('avatar', files[0])                    ps：若选择了文件，则files数组的长度不为0，即把files数组中的第一个值追加到FormData对象中
           4、使用xhr发起上传文件的请求
                           var  xhr = new XMLHttpRequest()
                           xhr.open('POST', '请求的URL地址')
                           xhr.send(fd)
           5、监听onreadystatechange事件
ps：若步骤2中，用户没有选择上传文件，则3后面的步骤则不会进行，即只有当选择了上传文件，2后面的步骤才会进行
       在定义UI结构时，img标签的作用是显示文件上传成功后显示的图片，也就是服务器响应回来的图片
       文本选择框的DOM对象有个files属性，表示一个文件数组，可以知道文件的数量以及文件的内容(有保存了图片的信息)
       上传文件必须使用POST请求 



(4)显示文件上传进度
步骤：1、建立xhr对象                			 var   xhr = new XMLHttpRequest()
            2、监听xhr.upload.onprogress事件                                  xhr.upload.onprogress = function(e) {   if(e.lengthComputable)  { var percentComplete = Math.ceil((e.loaded/e.total)*100)  }   }
 ps：e.lengthComputable为一个布尔值，表示当前上传的资源是否有可计算的长度，若返回true表示上传的资源具有可计算的长度
         e.loaded表示已传输的字节 
         e.total表示传输的总字节
         Math.ceil()表示小数取整




23、jQuery高级用法
(1)使用jQuery实现文件上传
步骤：1、导入jQuery文件             在</body>前引入<script src="jQuery.js"></script>
            2、定义UI结构                     在<body>   
				<input type="file" id="file1">
				<button id="btnUpload">上传文件</button>	     
            			       </body>
          3、验证是否选择了文件
          4、向FormData对象中追加文件
        				var fd = new FormData()
 				fd.appen('avatar',files[0]) 
           5、使用jQuery发起上传文件的请求      
 	 ps：必须使用$.ajax({})来发起上传文件的操作，并且必须有contentType、processData属性，取值都为false，
                           必须发起的是POST请求    
           6、实现loading效果
                  $(document).ajaxStart(function() {    $('#loading').show()   })                           Ajax请求开始时执行该函数
                  $(document).ajaxStop(function() {     $('#loading').hide()    })              	        Ajax请求结束时执行该函数
ps：files属性是DOM对象中的属性，若要jQuery对象使用DOM对象中的属性，需要把jQuery对象转化为DOM对象，语法：$('选择器名')[0]，DOM对象使用files属性语法：$('选择器名')[0].files
        文件的上传一定要用POST请求
        使用jQuery发起上传文件的请求时，即使用$.ajax({})发起POST请求，其里面必须有contentType、processData属性，并且两个属性值都为false
       $(document).ajaxStart()会监听当前文档内的所有ajax请求，并且该方法只能附加在文档中，即该方法的作用是可以监听到有ajax发起请求时才执行该方法




24、axios
定义：专注于网络数据请求的库

(1)axios发起GET请求
语法：1、导入axios文件
           2、var url = 'URL地址'
                  var   a = {name:'zs', age:20}
                  axios.get(url , {params:  a}).then(function(res){res.data})
ps：服务器响应回来的数据是res.data，因为res被axios包装成一个对象，其res.data才是服务器响应回来的数据


(2)axios发起POST请求
语法：1、导入axios文件
            2、var url1 = 'URL地址' 
                  var   b = {location:'广州', address:'白云区'}
                  axios.post(url1, b).then(function(res) {  res.data})
ps：服务器响应回来的数据是res.data，因为res是被axios封装成的一个对象


(3)直接使用axios发起GET/POST请求
语法： axios({
                      method:'请求类型',
                        url:'请求的URL地址',
                       data:{ //发起POST请求提交的数据 }
                       params:  {//发起GET请求携带的数据}
}).then(function(res){  res.data })
ps：若是发起GET请求，并且携带有数据给服务器，则必须使用params属性，
         若是发起POST请求，并且携带数据提交给服务器，则必须使用data属性




25、跨域和JSONP
(1)同源
定义：两个页面(URL地址)的协议、域名、端口都相同的为同源
ps：若域名后面没有写冒号数字，则端口号默认为80

(2)同源策略
定义：是浏览器提供的一个安全功能
理解：A网站的JavaScript不允许与非同源网站c之间进行资源交互
作用：隔离潜在的恶意文件

(3)跨域
定义：指两个页面(URL地址)的协议、域名、端口只要有一个不一致，则为跨域
原因：由于同源策略的出现，导致不允许和非同源的进行资源交互
ps：浏览器允许发起跨域请求，但是跨域请求回来的数据会被浏览器的同源策略所拦截，即无法被页面获取到

(4)实现跨域数据请求
方案：1、JSONP          2、CORS
ps：JSONP只支持GET请求，不支持POST请求
        CORS是W3C标准，支持GET、POST请求，但不兼容低版本的浏览器
 

(5)JOSNP
定义：是JSON的一种“使用模式”
作用：解决主流浏览器的跨域数据访问问题
原理：通过<script>标签的src属性，请求跨域的数据结构，并通过函数调用的形式接受跨域响应回来的数据(用两次script标签，一次放函数的定义，一次放函数的调用/函数调用放在js文件中，通过scr属性引入)
步骤：先在script标签定义一个函数，然后在另一个script标签引入外部js，并在其js文件末尾加上参数?callback=函数名，这样服务器才可以调用对应的函数名，从而反应回来对应的数据
ps：在调用外部js时，需要指定函数的名字，即在引入js文件的末尾再引入参数?callback=函数名
         若还想向服务器携带参数，则需要在?callback=函数名后通过查询字符串的方式加参数        eg：?callback=函数名&name=zs&age=20
         只支持GET请求，不支持POST请求
         JSONP和Ajax之间没有任何关系

(6)使用jQuery发起JSONP数据请求
实现：采用动态创建和移除script标签方式，来发起JSONP数据请求，在header标签中动态通过append添加script标签，当请求成功后又移除script标签
语法：$.ajax({
           url:'URL地址?参数',                ps：参数必须是以查询字符串的形式
            dataType:'JSONP',
           success:function(res){}
})
ps：使用jQuery发起JSONP数据请求，必须使dataType属性，其属性值为'JSONP'
        使用jQuery发起JSONP数据请求， 会自动携带一个callback=jQueryxxx的参数，jQueryxxx是随机生成的一个回调函数的名称，也就是说会自动的有一个回调函数的名称，这个名称是随机的
        若要自定义参数名，则添加jsonp属性，取值为'参数名'  ，默认为callback，
        若要自定义回调函数名，则添加jsonpCallback，取值为'回调函数名'，默认为jQueryxxx格式               常用



26、防抖
场景：在输入框，用户输入一连串的字符串，只要当输入完成后才执行查询的请求(输入框防抖)
作用：当频繁触发事件时，减少了次数回调，保证事件只执行一次，提高浏览器性能
定义：当事件被处发后，延迟n秒执行函数，若在这n秒过程中该事件又被触发，则重新计时
理解：王者荣耀的回城，点击回城(事件触发)，在回车等待的时间中若别人攻击或者自己动了，则回城失败(该事件被重新触发)，所以回城只能重新，继续重新等待，直到回城成功

(1)实现防抖
步骤：1、定义延时器Id          var    timer = null
            2、定义防抖的函数        function   debounceSearch(kw)  {     timer= setTimeout(function(){   //发起JSONP请求 },500)     }
            3、在keyup事件中清空timer         $('#ipt').on('keyup', function(){   clearTimerout(timer);  debounceSearch(keywords)})                  



27、节流
作用：防止被无限的触发事件
定义：减少一段时间内事件触发的频率
场景：懒加载时必须每次滑动触发、鼠标不断的触发事件，只在单位事件内触发一次

(1)节流阀
作用：节流阀为空，表示可以执行下次操作；节流阀不为空，表示不可以执行下次操作
ps：当前操作(上一次)执行完，必须使节流阀为空，表示可以进行下次操作
        每次操作前，先判断节流阀是否为空

区分防抖和节流：防抖只有最有一次触发有效
                              节流是有选择的执行一部分事件，减少事件触发的频率



28、HTTP协议
定义：网页内容(超文本)的传输协议(又称超文本传输协议)，规定了客户端与服务器进行网页内容传输时所必须遵守的传输格式
交互模型：采用请求/响应的交互模型

(1)通信
定义：信息的传递和交换
三要素：通信的主体、通信的内容、通信的方式

(2)通信协议
理解：实现约定好的通信格式

(3)互联网中的通信协议
定义：客户端与服务器进行网页内容的传输，则通信的双方必须遵守网页内容的传输协议(HTTP协议)

(4)HTTP请求消息/HTTP请求报文
定义：客户端发送到服务器的消息
组成：请求行、请求头部、空行、请求体
ps：客户端发起的请求叫HTTP请求
       GET请求没有请求体，即GET请求只有请求行、请求头部、空行

(5)请求行
组成：请求方式、URL、HTTP协议版本          ps：之间通过空格隔开

(6)请求头部
作用：描述客户端基本信息，并把信息告诉服务器
组成：User-Agent(当前浏览器类型)、Content-Type(发送到服务端的数据格式)、Accept(客户端接受的内容类型)、Accept-Language(客户端接受的语言)
ps：请求头部由多行键值对组成，键值对之间用:分割

(7)空行
作用：分割请求头部和请求体

(8)请求体
定义：通过POST方式把数据发送到服务器
ps：只有POST请求才有请求体，GET请求没有请求体


29、HTTP响应消息/响应报文
定义：服务器响应客户端的消息内容
组成：状态行、响应头部、空行、响应体

(1)状态行
组成：HTTP协议版本、状态码、状态码的描述文本                 ps：之间用空格隔开

(2)响应头部
定义：服务器的基本信息
组成：多行键值对         ps：键值之间用英文冒号隔开

(3)空行
作用：分割响应头部和响应体

(4)响应体
定义：服务器响应给客户端的资源内容


30、HTTP请求方法
作用：对服务器上的资源所执行的操作
方法：GET(查询)、POST(新增)、PUT(修改)、  DELETE(删除)


31、HTTP响应状态码
作用：表示响应的状态
组成：三个十进制数字组成，第一个数字定义状态码类型， 
分类：2开头(成功)、3开头(重定向)、4开头(客户端错误)、5开头(服务器错误)

(1)2开头的响应状态码
状态码      状态码英文名              中文描述
200               OK                           请求成功，用于POST和GET请求
201             Created                     已创建，用于POST和PUT请求       

(2)3开头的响应状态码
定义：服务器要求客户端重定向，即需要客户进一步操作完成资源的请求
状态码         状态码英文名            中文描述
301               Moved                      永久移动，今后的任何请求都赢使用新的URL代替
302              Found                         临时移动，资源临时被移动，但客户端继续使用原来的URL
304              Not Modefied          未修改，所请求的资源未修改，客户端通常缓存访问过的资源

(3)4开头的响应状态码
定义：表示客户端的请求有非法内容，导致请求失败
状态码                状态码英文名                   中文描述
404                      Not   Found                   服务器无法根据客户端的请求找到资源(网页)         
 
(4)5开头的响应状态码
定义：服务器未能正常处理客户端的请求而出现错误
状态码                状态码英文名                           中文描述
501                      Not  Implemented               服务器不支持该请求方法，无法完成请求









小结：1、把引入js文件位置放在/body标签前，这样可以保证先把html加载完再加载js，但若把引入js放在head标签中，则可能会导致js加载完了，而html还没加载完，会出现页面空白，为了避免出现这种情况，放在头部引入的js必须执行懒加载事件(先执行html再执行js)
            2、具体的请求路径是根路径加上具体接口的URL地址
            3、通过后期把元素追加到页面中，则无法通过jQuery方法使用，解决办法给父级绑定事件委托
           4、注意看每个请求成功的状态码是多少，比如POST请求成功返回的状态码是201
           5、若是a链接，其路径是javascript，必须在javascript后面加上:;   阻止跳转
           6、若是希望页面滚动到页面的最底部，则调用resetui()函数，resetul函数作用：让滚动条重置到最底部的位置
           7、audio设置了autoplay属性后会自动播放，当其src属性设置了新的路径就会播放
           8、jQuery.attr('属性名'，'属性值')可获得标签的属性
           9、使用事件对象e, e里有keyCode属性，可知道键盘中的每一个键的编码，方便知道自己按下什么键，若要给回车键绑定点击事件，则回车键的编码是13，即e.keyCode === 13    然后再绑定点击事件，  
          10、keyup事件触发是当用户松起键盘时会触发，keydown是按下键盘就触发，常用的是keyup事件
          11、若有选择器设置了点击事件，当要再次调用该选择器的事件，则才用自动触发事件，语法： 选择器.click()
          12、jQuery对象转化为原生的DOM对象，语法 $('选择器')[0]
          13、若要把表单的内容清空，则使用reset()方法，但是reset()是原生DOM的方法，若是jQuery对象要调用该方法，则需要把jQuery对象转化为DOM对象
          14、append方法是在起子级内容的后面追加内容，而html是直接修改内容
          15、script的type属性值默认为text/javascript，表示script里面的代码默认是按照JS去解析
          16、声明了函数千万别忘记调用函数，即调用了函数，函数才会生效
          17、将字符串改造成字符串数组，通过循环，将当前的字符串对应的属性名= 当前字符串对应属性名的.split(',')
          18、在script标签，且类型是text/htmll，则注释内不能写{{}}，否则会报错
          19、若要拿到对象中的属性，则可通过语法： 对象名.属性名       或者         对象名[属性名]
           20、若修改的不是输入框的标签，比如是button标签，则使用jQ修其标签的值是用text方法，即val方法只适用于input标签值的修改
           21、所有的函数在调用后必须用一个变量名来接这个函数返回值，
           22、input标签中有个autocomplete属性。取值为off，表示阻止自动填充行为
           23、 动态元素必须通过代理的方式(事件委托)来绑定事件
           24、  当在标签中设置了自定义属性，则需要用attr('自定义属性名')方法来获取自定义属性
           25、若要使标签中的属性设置对应的属性值，通过jquery方法，  语法： $('标签对应得到选择器').attr('属性名', '属性值')
          26、audio标签当只用到播放功能时，其显示跟隐藏是一致的，即不显示，但还还有其他功能：声音大小、播放速度、进度的调整，暂停 播放
          27、在keyup事件中，e.keyCode==13表示回车键 
         28、join('')作用：把数组里元素无缝对接、join('  ')作用：把数组里元素空格分隔
         29、aixos里的this指向的是window对象